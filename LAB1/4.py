"""
Это решение находит наибольшее "красивое" число (число с неповторяющимися
цифрами), которое не превышает заданное число N.
"""

from typing import NoReturn


def is_beautiful(number: int) -> bool:
    """
    Проверяет, является ли число "красивым".

    "Красивое" число — это число, в котором все цифры различны.
    Метод проверки: преобразуем число в строку. Затем создаем множество
    (set) из символов этой строки. Если длина исходной строки и
    размер множества совпадают, значит, все символы (цифры) были уникальны.

    Аргументы:
        number (int): Целое число для проверки.

    Возвращает:
        bool: True, если число красивое, иначе False.
    """
    s_number = str(number)
    return len(s_number) == len(set(s_number))


def find_largest_beautiful_number(limit: int) -> int:
    """
    Находит наибольшее красивое число, не превосходящее заданный предел.

    Итерируется в обратном порядке от `limit` до 1, возвращая первое
    найденное "красивое" число.

    Аргументы:
        limit (int): Верхняя граница для поиска (N).

    Возвращает:
        int: Искомое красивое число.
    """
    # Начинаем поиск с N и идем вниз.
    # Первый же найденный "красивый" номер и будет ответом.
    for num in range(limit, 0, -1):
        if is_beautiful(num):
            return num
    # Этот код недостижим при limit >= 1, так как все однозначные числа
    # являются "красивыми".
    return -1 # Заглушка на случай некорректных входных данных.


def main() -> NoReturn:
    """
    Основная функция программы: считывает N, находит ответ и выводит его.
    """
    try:
        # Считываем число N.
        n = int(input())

        # Находим и выводим результат.
        result = find_largest_beautiful_number(n)
        print(result)

    except (ValueError, EOFError):
        # Обработка некорректного ввода.
        print("Ошибка: Введите одно целое положительное число.")


if __name__ == "__main__":
    main()