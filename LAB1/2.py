"""
Это решение вычисляет, сколько дней потребуется программе-вирусу,
чтобы общее количество сгенерированных картинок превысило заданный порог N.
"""
from typing import NoReturn

def calculate_virus_duration(
    generated_per_day: int,
    deleted_per_day: int,
    threshold: int
) -> int:
    """
    Вычисляет количество дней, пока общее число картинок не превысит порог.

    Логика работы:
    1.  В первый день создается `X` картинок.
    2.  Если `X > N`, ответ — 1 день.
    3.  Иначе, со второго дня ежедневный прирост составляет `X - Y`.
    4.  Мы вычисляем, сколько еще дней потребуется, чтобы покрыть разницу
        `(N - X)` и превысить ее. Это делается с помощью целочисленного
        деления с округлением вверх (ceiling division).

    Аргументы:
        generated_per_day (int): Количество картинок, создаваемых каждый день (X).
        deleted_per_day (int): Количество картинок, удаляемых со второго дня (Y).
        threshold (int): Порог количества картинок, который нужно превысить (N).

    Возвращает:
        int: Общее количество дней работы программы.
    """
    # В первый день создается `generated_per_day` картинок.
    # Если это уже больше порога, программа работала всего 1 день.
    if generated_per_day > threshold:
        return 1

    # Со второго дня чистый прирост картинок за день.
    # По условию X > Y, поэтому это значение всегда положительное.
    net_daily_gain = generated_per_day - deleted_per_day

    # После первого дня нам нужно сгенерировать еще как минимум
    # (threshold - generated_per_day) + 1 картинок, чтобы превысить порог.
    pictures_needed_to_exceed = (threshold - generated_per_day) + 1

    # Вычисляем количество дополнительных дней, используя деление с округлением вверх.
    # В целочисленной арифметике ceil(a / b) эквивалентно (a + b - 1) // b.
    additional_days = (pictures_needed_to_exceed + net_daily_gain - 1) // net_daily_gain

    # Общее время = 1 (первый день) + дополнительные дни.
    return 1 + additional_days


def main() -> NoReturn:
    """
    Основная функция: считывает входные данные, вызывает решатель и выводит результат.
    """
    try:
        # Считываем три целочисленных значения из стандартного ввода.
        x = int(input())  # Создает в день
        y = int(input())  # Удаляет в день (со 2-го)
        n = int(input())  # Порог

        # Вычисляем и выводим результат.
        days = calculate_virus_duration(
            generated_per_day=x,
            deleted_per_day=y,
            threshold=n
        )
        print(days)

    except (ValueError, EOFError):
        # Обработка некорректного или отсутствующего ввода.
        # В условиях олимпиады обычно не требуется, но это хорошая практика.
        pass


if __name__ == "__main__":
    main()